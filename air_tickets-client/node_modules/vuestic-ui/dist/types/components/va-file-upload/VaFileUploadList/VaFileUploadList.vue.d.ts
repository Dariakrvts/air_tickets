import { PropType } from 'vue';
import type { VaFile, ConvertedFile } from '../types';
declare const _default: import("vue").DefineComponent<{
    file: {
        type: PropType<ConvertedFile | null>;
        required: true;
        default: ConvertedFile | null;
    };
    ariaRemoveFileLabel: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    onRemove: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    files: {
        type: PropType<VaFile[]>;
        default: null;
    };
}, {
    galleryItemProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        color: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        file: {
            type: PropType<ConvertedFile>;
            required: true;
            default: ConvertedFile;
        };
        ariaRemoveFileLabel: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        onRemove: {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
    }>>;
    itemProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        color: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        file: {
            type: PropType<ConvertedFile | null>;
            required: true;
            default: ConvertedFile | null;
        };
        ariaRemoveFileLabel: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        onRemove: {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
    }>>;
    singleItemProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        file: {
            type: PropType<ConvertedFile | null>;
            required: true;
            default: ConvertedFile | null;
        };
        ariaRemoveFileLabel: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        onRemove: {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
    }>>;
    filesList: import("vue").ComputedRef<ConvertedFile[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("remove" | "removeSingle")[], "remove" | "removeSingle", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    file: {
        type: PropType<ConvertedFile | null>;
        required: true;
        default: ConvertedFile | null;
    };
    ariaRemoveFileLabel: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    onRemove: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    files: {
        type: PropType<VaFile[]>;
        default: null;
    };
}>> & {
    onRemove?: ((...args: any[]) => any) | undefined;
    onRemoveSingle?: ((...args: any[]) => any) | undefined;
}, {
    color: string;
    type: string;
    onRemove: ((...args: any[]) => any) | undefined;
    file: ConvertedFile | null;
    ariaRemoveFileLabel: string;
    files: VaFile[];
}>;
export default _default;

import { u as useComponentPresetProp } from "../../composables/useComponentPreset-0dfbd395.mjs";
import { defineComponent, computed } from "vue";
import { c as clamp_1 } from "../../../vendor-b303cd6e.mjs";
import { u as useColors } from "../../composables/useColors-cd2c0b98.mjs";
import { u as useTextColor } from "../../composables/useTextColor-19f6bd95.mjs";
import { u as useTranslation } from "../../composables/useTranslation-67b81a6e.mjs";
const _sfc_main = defineComponent({
  name: "VaProgressBar",
  props: {
    ...useComponentPresetProp,
    modelValue: { type: Number, default: 0 },
    indeterminate: { type: Boolean, default: false },
    color: { type: String, default: "primary" },
    size: {
      type: [Number, String],
      default: "medium"
    },
    buffer: { type: Number, default: 100 },
    rounded: { type: Boolean, default: true },
    reverse: { type: Boolean, default: false },
    contentInside: { type: Boolean, default: false },
    showPercent: { type: Boolean, default: false },
    max: { type: Number, default: 100 },
    ariaLabel: { type: String, default: "$t:progressState" }
  },
  setup(props) {
    const { getColor, getHoverColor } = useColors();
    const { textColorComputed } = useTextColor();
    const colorComputed = computed(() => getColor(props.color));
    const isTextSize = computed(() => typeof props.size === "string" && ["small", "medium", "large"].includes(props.size));
    const getCSSHeight = () => {
      if (typeof props.size === "number") {
        return `${props.size}px`;
      }
      if (isTextSize.value) {
        return;
      }
      return props.size;
    };
    const { tp } = useTranslation();
    const progressBarValue = computed(() => 100 / props.max * props.modelValue);
    return {
      rootClass: computed(() => ({
        "va-progress-bar--square": !props.rounded,
        [`va-progress-bar--${props.size}`]: isTextSize.value
      })),
      rooStyle: computed(() => ({
        "--va-progress-bar-color": colorComputed.value,
        "--va-progress-bar-background-color": getHoverColor(colorComputed.value)
      })),
      wrapperStyle: computed(() => ({
        height: getCSSHeight()
      })),
      bufferStyle: computed(() => ({
        width: `${props.indeterminate ? 100 : clamp_1(props.buffer, 0, 100)}%`,
        color: textColorComputed.value,
        [props.reverse ? "right" : "left"]: 0
      })),
      progressStyle: computed(() => ({
        marginLeft: props.reverse ? "auto" : void 0,
        width: `${clamp_1(progressBarValue.value, 0, 100)}%`
      })),
      intermediateStyle: computed(() => ({
        animationDirection: props.reverse ? "reverse" : "normal"
      })),
      ariaAttributesComputed: computed(() => ({
        role: "progressbar",
        "aria-label": tp(props.ariaLabel),
        "aria-valuenow": !props.indeterminate ? props.modelValue : void 0
      }))
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaProgressBar.vue_vue_type_script_lang-f26e6797.mjs.map

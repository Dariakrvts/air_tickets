import { defineComponent, computed } from "vue";
import { V as VaAvatar } from "../va-avatar/index-84aec4b5.mjs";
import { p as pick_1 } from "../../../vendor-b303cd6e.mjs";
import { u as useAvatarProps } from "../va-avatar/hooks/useAvatarProps-7897713e.mjs";
import { u as useSizeProps, a as useSize } from "../../composables/useSize-73067570.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset-0dfbd395.mjs";
import { u as useBem } from "../../composables/useBem-a19cd502.mjs";
const _sfc_main = defineComponent({
  name: "VaAvatarGroup",
  components: {
    VaAvatar
  },
  props: {
    ...useSizeProps,
    ...useComponentPresetProp,
    ...useAvatarProps,
    max: {
      type: Number,
      default: void 0
    },
    vertical: {
      type: Boolean,
      default: false
    },
    options: {
      type: Array,
      default: () => []
    }
  },
  setup(props) {
    const classComputed = useBem("va-avatar-group", () => ({
      ...pick_1(props, ["vertical"])
    }));
    const maxOptions = computed(() => props.options.slice(0, props.max));
    const visibleItemsCount = computed(() => props.max ? props.max + 1 : 1);
    const restOptionsCount = computed(() => props.options.length - (props.max || 0));
    const { sizeComputed, fontSizeComputed } = useSize(props, "VaAvatarGroup");
    const avatarProps = computed(() => ({
      ...props,
      fontSize: fontSizeComputed.value,
      size: sizeComputed.value
    }));
    return {
      classComputed,
      maxOptions,
      visibleItemsCount,
      restOptionsCount,
      avatarProps
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=VaAvatarGroup.vue_vue_type_script_lang-fc3dd526.mjs.map

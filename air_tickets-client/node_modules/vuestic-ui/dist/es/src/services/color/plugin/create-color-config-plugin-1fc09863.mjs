import { watch } from "vue";
import { i as isServer } from "../../../utils/ssr-fd33979c.mjs";
import { j as cssVariableName } from "../utils-341c6fd7.mjs";
import { u as useColors } from "../../../composables/useColors-cd2c0b98.mjs";
const setCSSVariable = (name, value, root) => {
  root.style.setProperty(cssVariableName(name), value);
};
const createColorConfigPlugin = (app, config) => {
  var _a;
  const { colors: configColors, getTextColor, getColor, currentPresetName, applyPreset } = useColors();
  const renderCSSVariables = (colors = configColors) => {
    if (!colors) {
      return;
    }
    const colorNames = Object.keys(colors);
    const renderedColors = colorNames.map((key) => `${cssVariableName(key)}: ${colors[key]}`).join(";");
    const renderedOnColors = colorNames.map((key) => `${cssVariableName(`on-${key}`)}: ${getColor(getTextColor(colors[key]))}`).join(";");
    return `${renderedColors};${renderedOnColors}`;
  };
  const updateColors = (newValue) => {
    if (!newValue) {
      return;
    }
    if (isServer()) {
      return;
    }
    const root = document.documentElement;
    const colorNames = Object.keys(newValue);
    colorNames.forEach((key) => {
      setCSSVariable(key, newValue[key], root);
    });
    colorNames.forEach((key) => {
      setCSSVariable(`on-${key}`, getColor(getTextColor(newValue[key])), root);
    });
  };
  watch(configColors, (newValue) => {
    updateColors(newValue);
  }, { immediate: true, deep: true });
  if ((_a = config == null ? void 0 : config.colors) == null ? void 0 : _a.currentPresetName) {
    applyPreset(config.colors.currentPresetName);
  }
  return {
    renderCSSVariables,
    updateColors
  };
};
export {
  createColorConfigPlugin as c
};
//# sourceMappingURL=create-color-config-plugin-1fc09863.mjs.map

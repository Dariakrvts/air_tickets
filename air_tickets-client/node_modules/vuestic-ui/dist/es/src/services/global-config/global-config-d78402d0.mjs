import { j as cloneDeep_1 } from "../../../vendor-b303cd6e.mjs";
import { ref, getCurrentInstance } from "vue";
import { g as getBreakpointDefaultConfig } from "../breakpoint/index-a161fafe.mjs";
import { i as inject, g as getCurrentApp } from "../current-app-1538613c.mjs";
import { m as mergeDeep } from "../../utils/merge-deep-46a0309b.mjs";
import { g as getColorDefaultConfig } from "../color/config/default-6d2d858b.mjs";
import { g as getIconDefaultConfig } from "../icon/config/default-497a393a.mjs";
import { g as getComponentsDefaultConfig } from "../component-config/config/default-796edf79.mjs";
import { g as getI18nConfigDefaults } from "../i18n/config/default-aecde942.mjs";
import { g as getColorsClassesDefaultConfig } from "../colors-classes/plugin/index-d50dd4f9.mjs";
const GLOBAL_CONFIG = Symbol("GLOBAL_CONFIG");
const createGlobalConfig = () => {
  const globalConfig = ref({
    colors: getColorDefaultConfig(),
    icons: getIconDefaultConfig(),
    components: getComponentsDefaultConfig(),
    breakpoint: getBreakpointDefaultConfig(),
    i18n: getI18nConfigDefaults(),
    colorsClasses: getColorsClassesDefaultConfig(),
    /**
     * global config variable to pass nuxt-link component to vuestic-ui via @vuestic/nuxt
     * TODO: give a try to integrate inertia js router components via this option
     * TODO: if this try won't be success, may be remake to provide/inject
     */
    routerComponent: void 0
  });
  const getGlobalConfig = () => globalConfig.value;
  const setGlobalConfig = (updater) => {
    const config = typeof updater === "function" ? updater(globalConfig.value) : updater;
    globalConfig.value = cloneDeep_1(config);
  };
  const mergeGlobalConfig = (updater) => {
    const config = typeof updater === "function" ? updater(globalConfig.value) : updater;
    globalConfig.value = mergeDeep(cloneDeep_1(globalConfig.value), config);
  };
  return {
    getGlobalConfig,
    setGlobalConfig,
    mergeGlobalConfig,
    globalConfig
  };
};
const provideForCurrentApp = (provide) => {
  var _a, _b;
  const provides = ((_a = getCurrentInstance()) == null ? void 0 : _a.appContext.provides) || ((_b = getCurrentApp()) == null ? void 0 : _b._context.provides);
  if (!provides) {
    throw new Error("Vue app not found for provide");
  }
  provides[GLOBAL_CONFIG] = provide;
  return provide;
};
function useGlobalConfig() {
  let injected = inject(GLOBAL_CONFIG);
  if (!injected) {
    injected = createGlobalConfig();
    provideForCurrentApp(injected);
  }
  return injected;
}
export {
  GLOBAL_CONFIG as G,
  createGlobalConfig as c,
  useGlobalConfig as u
};
//# sourceMappingURL=global-config-d78402d0.mjs.map
